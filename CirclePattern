#include<GL/freeglut.h>
#include<cmath>
#include<vector>


const int LARGURA=1200;
const int ALTURA=800;
const int FPS=35;
const float PI=3.141592653539;


void display();
void moving(int valor);

void circle(float xc, float yc, float radius, float cor[3]);
void circleFill(float xc, float yc, float radius,float cor[3]);
void line(float x1,float y1, float x2, float y2,float cor[3]);
void point(float x1,float y1,float cor[3]);


float time=0;
unsigned int numberOfCircles=5;
std::vector<float> wave;


int main(int argc, char *argv[])
{
    glutInit(&argc, argv);
    glutInitWindowSize(LARGURA,ALTURA);
    glutInitWindowPosition(10,10);
    glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE);

    glutCreateWindow("Circles Pattern - April 2019");
    glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	gluOrtho2D(0,LARGURA,0, ALTURA);


//    glutReshapeFunc(resize);
    glutDisplayFunc(display);
  //  glutKeyboardFunc(key);
    glutTimerFunc(1000/FPS,moving,0);

    glutMainLoop();

    return EXIT_SUCCESS;
}

void display()
{
    glClearColor(0,0,0,1);
    glClear(GL_COLOR_BUFFER_BIT);
    float cor[3]={1,1,1};

    float x=0;
    float y=0;
    float xc=LARGURA/3;
    float yc=ALTURA/2;

    for(unsigned i=0;i<numberOfCircles;i++)
    {
        int n=2*i+1;
        float prevx=x;
        float prevy=y;
        float radius=100*4/(n*PI);

        circle(xc,yc,radius,cor);

        x=xc+radius*cos(n*time);
        y=yc+radius*sin(n*time);
        wave.insert(wave.begin(),y);
        if(wave.size()>300)
            wave.pop_back();
        circleFill(x,y,5,cor);

        line(xc,yc,x,y,cor);
        // line(x,y,2*xc,wave[0],cor);
        xc=x;
        yc=y;

    }

 //   glBegin(GL_LINE_STRIP);
	//	for(unsigned j=0;j<wave.size();j++)
      //      glVertex2f(j+2*xc,wave[j]);
	//glEnd();

    glutSwapBuffers();
}


void line(float x1,float y1, float x2, float y2,float cor[3])
{
    glColor3fv(cor);
   // glLineWidth(3.0);
	glBegin(GL_LINES);
		glVertex2f(x1,y1);
		glVertex2f(x2,y2);
	glEnd();
}


void point(float x1,float y1,float cor[3])
{
    glColor3fv(cor);
   	glBegin(GL_POINTS);
		  glVertex2f(x1,y1);
  	glEnd();
}

void circle(float xc, float yc, float radius,float cor[3])
{
    float incr=0.1;

	glColor3fv(cor);
	glBegin(GL_LINE_LOOP);
		for(float angulo=0;angulo<2*PI;angulo+=incr)
		{
			float x=xc+radius*cos(angulo);
			float y=yc+radius*sin(angulo);
			glVertex2f(x,y);
		}
	glEnd();
}

void circleFill(float xc, float yc, float radius,float cor[3])
{
    float incr=0.1;
	glColor3fv(cor);
	glBegin(GL_POLYGON);
		for(float angulo=0;angulo<2*PI;angulo+=incr)
		{
			float x=xc+radius*cos(angulo);
			float y=yc+radius*sin(angulo);
			glVertex2f(x,y);
		}
	glEnd();
}


void moving(int valor)
{
	time+=0.02;
	//cam_ang+=0.5;
	glutPostRedisplay();
	glutTimerFunc(1000/FPS,moving,0);
}

